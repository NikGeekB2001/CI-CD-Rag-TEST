name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      etcd:
        image: quay.io/coreos/etcd:v3.5.5
        env:
          ETCD_AUTO_COMPACTION_MODE: revision
          ETCD_AUTO_COMPACTION_RETENTION: 1000
          ETCD_QUOTA_BACKEND_BYTES: 4294967296
          ETCD_SNAPSHOT_COUNT: 50000
        options: >-
          --health-cmd "etcdctl endpoint health"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3

      minio:
        image: minio/minio:RELEASE.2023-03-20T20-16-18Z
        env:
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
        ports:
          - 9000:9000
          - 9001:9001
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3

      milvus:
        image: milvusdb/milvus:v2.3.0
        env:
          ETCD_ENDPOINTS: etcd:2379
          MINIO_ADDRESS: minio:9000
        ports:
          - 19530:19530
          - 9091:9091
        options: >-
          --health-cmd "curl -f http://localhost:9091/healthz || exit 1"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Free Disk Space
      uses: jlumbroso/free-disk-space@main
      with:
        # This action removes unnecessary packages and cleans up disk space
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache Hugging Face models
      uses: actions/cache@v3
      with:
        path: ~/.cache/huggingface
        key: ${{ runner.os }}-hf-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-hf-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: Run tests with pytest
      run: |
        export PYTHONPATH=src:$PYTHONPATH
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Prepare coverage artifacts
      run: |
        mkdir reports
        mv htmlcov reports/
        mv coverage.xml reports/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./reports/coverage.xml

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-coverage
        path: reports/
